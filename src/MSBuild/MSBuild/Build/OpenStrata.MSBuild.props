<!--
***********************************************************************************************
OpenStrata.MSBuild.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) Open-Strata contributors. All rights reserved.. All rights reserved.
***********************************************************************************************
-->
<Project  xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >


	<PropertyGroup>
		<!--This property is required to ensure transitive project behavior-->
		<RestoreProjectStyle>PackageReference</RestoreProjectStyle>

		<OstrataBuildMode Condition="'$(OstrataBuildMode)' == ''">ide</OstrataBuildMode>
		
		<!--<UseGitInfoForVersions Condition="'$(UseGitInfoForVersions)' == ''">false</UseGitInfoForVersions>-->
		<!--<IncludeGitInfoInPackage Condition="'$(IncludeGitInfoInPackage)' == ''">false</IncludeGitInfoInPackage>-->

		<AssemblyOriginatorKeyFile Condition="'$(AssemblyOriginatorKeyFile)' == ''">$(MSBuildProjectName).snk</AssemblyOriginatorKeyFile>
		<FXPATH Condition="'$(FXPATH)' == ''">$(MSBuildThisFileDirectory)..\tools</FXPATH>
		<SNExe Condition="'$(SNExe)' == ''">"$(FXPATH)\sn.exe"</SNExe>

	</PropertyGroup>

	<PropertyGroup  Condition="'$(SolutionDir)' == '*Undefined*' Or '$(SolutionDir)' == '' " >

			<SolutionFilePath></SolutionFilePath>

		    <_curSlnCount>$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)","*.sln").Length)</_curSlnCount>
		    <_parentSlnCount>$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)\..","*.sln").Length)</_parentSlnCount>
		    <_parentParentSlnCount>$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)\..","*.sln").Length)</_parentParentSlnCount>

	   	   <SolutionFilePath Condition="'$(_curSlnCount)' > '0'" >$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)","*.sln")[0])</SolutionFilePath>
	   	   <SolutionFilePath Condition="'$(SolutionFilePath)'=='' And '$(_parentSlnCount)' > '0'" >$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)\..","*.sln")[0])</SolutionFilePath>
	   	   <SolutionFilePath Condition="'$(SolutionFilePath)'=='' And '$(_parentParentSlnCount)' > '0'" >$([System.IO.Directory]::GetFiles("$(MSBuildProjectDirectory)\..\..","*.sln")[0])</SolutionFilePath>

		   <SolutionFilePath Condition="'$(SolutionFilePath)'!=''" >$([System.IO.Path]::GetFullPath("$(SolutionFilePath)"))</SolutionFilePath>

		   <SolutionDir  Condition="'$(SolutionFilePath)'!=''" >$([System.IO.Path]::GetDirectoryName("$(SolutionFilePath)"))\</SolutionDir>
		   <SolutionFileName  Condition="'$(SolutionFilePath)'!=''" >$([System.IO.Path]::GetFileName("$(SolutionFilePath)"))</SolutionFileName>		   
		   <SolutionName  Condition="'$(SolutionFilePath)'!=''" >$([System.IO.Path]::GetFileNameWithoutExtension("$(SolutionFilePath)"))</SolutionName>
		   <SolutionDirName  Condition="'$(SolutionFilePath)'!=''" >$([System.IO.Path]::GetFileName("$([System.IO.Path]::GetDirectoryName("$(SolutionFilePath)"))"))</SolutionDirName>		   

     	   <AutoUpdateVersion Condition="'$(AutoUpdateVersion)' == ''" >true"</AutoUpdateVersion>

	</PropertyGroup>

	<PropertyGroup>
		
		<BuildModeSolutionExtensionsDir>$(SolutionDir).$(OstrataBuildMode)\</BuildModeSolutionExtensionsDir>
		<BuildModeProjectExtensionsDir>.$(OstrataBuildMode)\</BuildModeProjectExtensionsDir>
		<ConfigurationSolutionExtensionsDir>$(SolutionDir).$(OstrataBuildMode)\</ConfigurationSolutionExtensionsDir>
		<ConfigurationProjectExtensionsDir>.$(OstrataBuildMode)\</ConfigurationProjectExtensionsDir>		

	</PropertyGroup>


	<!--Extension Prop Sources-->


	<Import Project="$(OpenStrataExtensionProps)" Condition="'$(OpenStrataExtensionProps)' != ''"/>
	<!--<Import Project=".extensions\**\*.props" />-->
	<!--<Import Project="$(BuildModeSolutionExtensionsDir)**\*.props" />-->
	<!--<Import Project="$(BuildModeProjectExtensionsDir)**\*.props" />-->
	<!--<Import Project="$(ConfigurationSolutionExtensionsDir)**\*.props" />-->
	<!--<Import Project="$(ConfigurationProjectExtensionsDir)**\*.props" />-->

	<!--Legacy support inclusions-->
	<Import Project="$(SolutionDir)environments.props" Condition="Exists('$(SolutionDir)environments.props')" />
	<Import Project="$(SolutionDir)dotnetsolution.props" Condition="Exists('$(SolutionDir)dotnetsolution.props')" />


	<!--Extension Target Sources-->

	<!--<ItemGroup Label="Extensension Sources">

		<openStrataExtensionsTargets Include="$(SolutionDir)\.extensions\**\*.targets" />
		<openStrataExtensionsTargets Include=".extensions\**\*.targets" />
		<openStrataExtensionsTargets Include="$(BuildModeSolutionExtensionsDir)**\*.targets" />
		<openStrataExtensionsTargets Include="$(BuildModeProjectExtensionsDir)**\*.targets" />
		<openStrataExtensionsTargets Include="$(ConfigurationSolutionExtensionsDir)**\*.targets" />
		<openStrataExtensionsTargets Include="$(ConfigurationProjectExtensionsDir)**\*.targets" />

		--><!--Legacy support inclusions--><!--
		<openStrataExtensionsTargets Include="$(SolutionDir)environments.targets" Condition="Exists('$(SolutionDir)environments.targets')" />
		<openStrataExtensionsTargets Include="$(SolutionDir)dotnetsolution.targets" Condition="Exists('$(SolutionDir)dotnetsolution.targets')" />

	</ItemGroup>-->

	<PropertyGroup>
		<DefaultLogoPath>$(MSBuildThisFileDirectory)..\media\DefaultIcon.png</DefaultLogoPath>

		<!--<LocalDebugPackageFeedPath Condition="'$(LocalDebugPackageFeedPath)' == ''">C:\DebugPackages</LocalDebugPackageFeedPath>-->

		<!--<PushAfterBuild Condition="'$(PushAfterBuild)'==''">false</PushAfterBuild>-->
		<!--<PushAfterBuild Condition="'$(Configuration)'=='Release'">true</PushAfterBuild>-->

      <OpenStrataPropsPath Condition="'$(OpenStrataPropsPath)' == ''">$([MSBuild]::GetPathOfFileAbove('openstrata.props', '$(MSBuildProjectDirectory)'))</OpenStrataPropsPath>
      <DotOstrataPath Condition="'$(DotOstrataPath)' == '' And '$(OpenStrataPropsPath)' != ''">$([MSBuild]::GetDirectoryNameOfFileAbove('$(MSBuildProjectDirectory)','$(OpenStrataPropsPath)')).openstrata\</DotOstrataPath>
      <DotOstrataPath Condition="'$(DotOstrataPath)' == '' And '$(SolutionDir)' != ''">$(SolutionDir)\.openstrata\</DotOstrataPath>               
      <DotOstrataPath Condition="'$(DotOstrataPath)' == ''">$(MSBuildProjectDirectory)..\.openstrata\</DotOstrataPath>

	  <DotOstrataTmpPath Condition="'$(DotOstrataTmpPath)' == ''">$(DotOstrataPath)tmp\</DotOstrataTmpPath>
	  <DotOstrataLocksPath Condition="'$(DotOstrataLocksPath)' == ''">$(DotOstrataPath)locks\</DotOstrataLocksPath>	 
	  <DotOstrataLocksPath Condition="'$(DotOstrataLocksPath)' == ''">$(DotOstrataPath)gitignore\</DotOstrataLocksPath>	 	

	</PropertyGroup>

	<PropertyGroup Label="Get Nuget Package Metadata from files">
		<PackageDescriptionPath Condition="'$(PackageDescriptionPath)' == ''">description.txt</PackageDescriptionPath>
		<PackageReleaseNotesPath Condition="'$(PackageReleaseNotesPath)' == ''">releaseNotes.txt</PackageReleaseNotesPath>
		<PackageReadmePath Condition="'$(PackageReadmePath)' == ''">readme.md</PackageReadmePath>
		<PackageReadmeFile Condition="Exists('$(PackageReadmePath)')">docs\readme.md</PackageReadmeFile>
	</PropertyGroup>

	<ItemGroup>
		<None Include="$(PackageReadmePath)" Condition="Exists('$(PackageReadmePath)')">
			<Pack>true</Pack>
			<PackagePath>docs\</PackagePath>
		</None>
		<None Include="$(PackageDescriptionPath)" Condition="Exists('$(PackageDescriptionPath)')">
			<Pack>false</Pack>
		</None>
		<None Include="$(PackageReleaseNotesPath)" Condition="Exists('$(PackageReleaseNotesPath)')">
			<Pack>false</Pack>
		</None>
		<None Include="$(PackageSummaryPath)" Condition="Exists('$(PackageSummaryPath)')">
			<Pack>false</Pack>
		</None>
	</ItemGroup>

	<PropertyGroup>
		<PrepareForBuildDependsOn>PrepareForOpenStrataBuild; $(PrepareForBuildDependsOn)</PrepareForBuildDependsOn>
		<PrepareForOpenStrataBuildDependsOn>
			FixMergeDiffVersionMarkup;
			Manifest;
			PrepareMSBuildForOpenStataBuild;
			$(PrepareForOpenStrataBuildDependsOn)
		</PrepareForOpenStrataBuildDependsOn>
		<!--<GenerateNuspecDependsOn>SetGitInfoForPackage; SetVersionFromGitInfo; $(GenerateNuspecDependsOn)</GenerateNuspecDependsOn>-->
		<!--<CoreCompileDependsOn>SetVersionFromGitInfo; CheckForCommitBeforePacking; $(CoreCompileDependsOn)</CoreCompileDependsOn>-->
	</PropertyGroup>



</Project>
