<!--
***********************************************************************************************
OpenStrata.MSBuild.Solution.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) 74Bravo LLC and Contributors. All rights reserved.. All rights reserved.
***********************************************************************************************
-->
<Project  xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >

	<PropertyGroup Condition="'$(OpenStrataBuildSolutionAssemblyFile)' == ''">
		<OpenStrataBuildSolutionAssemblyFile>$(MSBuildThisFileDirectory)..\tasks\OpenStrata.MSBuild.Solution.dll</OpenStrataBuildSolutionAssemblyFile>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
	</PropertyGroup>

	<!-- Tasks -->
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.CreateDataverseSolutionFromTemplate" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.FixUpDataverseSolutionPublisher" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.GetSolutionInfo" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.SetSolutionInfo" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.FixSolutionXml" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.RemoveCanvasAppVersion" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Solution.Tasks.SetCanvasAppVersionToUTCNow" AssemblyFile="$(OpenStrataBuildSolutionAssemblyFile)"     TaskFactory="TaskHostFactory" />


	<!-- Add Plugin References as Project References -->
	<ItemGroup>
		<ProjectReference Include="@(PluginReference)" Exclude="@(ProjectReference)" />
	</ItemGroup>

	<!--OS_GetDataverseSolutionInfo-->



	<PropertyGroup>
		<PushTargets>PowerAppsPackage;$(PushTargets)</PushTargets>
	</PropertyGroup>

	<Target Name="ProcessPluginReferences" BeforeTargets="PowerAppsPackage" DependsOnTargets="FixMergeDiffVersionMarkup;OS_GetDataverseSolutionInfo;">
		<MSBuild Projects="@(PluginReference)"
				 Targets="Build;GetPluginPackageInfo"		 
				 Properties="Configuration=$(Configuration);SolutionMetadataDir=$([System.IO.Path]::GetFullPath($(MSBuildProjectDirectory)/$(SolutionRootPath)));SolutionPublisherPrefix=$(DataverseSolutionCustomizationPrefix);AutoUpdateVersion=$(AutoUpdateVersion)"
			     RunEachTargetSeparately="true">
			<!-- <Output TaskParameter="TargetOutputs" ItemName="ProjectReferenceCopyLocalPaths"/> -->
		</MSBuild>

	</Target>

	<Target Name="OpenStrata_BeforePowerAppsPackage" BeforeTargets="PowerAppsPackage" DependsOnTargets="BeforeBuild" />

	<Target Name="InitializeSolutionTemplate" BeforeTargets="CopyCdsSolutionContent" 
			DependsOnTargets="$(InitializeSolutionTemplateDependsOn)"
			Condition="!Exists('$(ProjectDir)$(SolutionRootPath)\other\solution.xml')">


		<Message Text="Initializing Solution Template" />


		<MakeDir
		   Directories="$(ProjectDir)$(SolutionRootPath)"/>

		<ItemGroup>
			<OpenStrataSolutionTemplateFiles Include="$(MSBuildThisFileDirectory)..\templates\Metadata\**\*.*"/>
		</ItemGroup>

		<Copy
		SourceFiles="@(OpenStrataSolutionTemplateFiles)"
		DestinationFiles="@(OpenStrataSolutionTemplateFiles->'$(ProjectDir)$(SolutionRootPath)\%(RecursiveDir)%(Filename)%(Extension)')"
        />

		<FixUpDataverseSolutionPublisher
			PublisherUniqueName="$(DataversePublisherUniqueName)"

			>
			<Output TaskParameter="FixedPublisherUniqueName"
                  PropertyName="FixedPublisherUniqueName" />
		</FixUpDataverseSolutionPublisher>

		<CreateDataverseSolutionFromTemplate
			TemplatePath="$(ProjectDir)$(SolutionRootPath)\Other\template_Solution.xml"
			SolutionName="$(DataverseSolutionName)"
			PublisherUniqueName="$(FixedPublisherUniqueName)"
			CustomizationPrefix="$(DataversePublisherPrefix)" />
	</Target>

	<Target Name="OpenStrataBeforeSolutionPublish" BeforeTargets="Publish" DependsOnTargets="PowerAppsPackage" />

	<Target Name="SpecifySolutionStratiFiles" DependsOnTargets="PowerAppsPackage">

		<PropertyGroup Condition="'$(LocalStrati)' != 'true'">
			<_SolutionPackageStratiZipFilePath>$(SolutionPackageZipPath)\$(SolutionPackageZipFile)</_SolutionPackageStratiZipFilePath>
			<_SolutionPackageStratiZipFilePath Condition="'$(SolutionPackageType)' == 'Both'">$(_SolutionPackageStratiZipFilePath.Replace(".zip","_managed.zip"))</_SolutionPackageStratiZipFilePath>
		</PropertyGroup>

		<PropertyGroup Condition="'$(LocalStrati)' == 'true'">
			<_SolutionPackageStratiZipFilePath>$(SolutionPackageZipPath)\$(SolutionPackageZipFile)</_SolutionPackageStratiZipFilePath>
		</PropertyGroup>

		<!--TODO: Show Error if the project package type is unmanaged.-->

		<ItemGroup>
			<StratiFiles Include="$(_SolutionPackageStratiZipFilePath)" Condition="">
				<PackagePath>\strati\solution\</PackagePath>
				<UniqueName>$(DataverseSolutionUniqueName)</UniqueName>
				<LocalImportSequence>$(LocalImportSequence)</LocalImportSequence>
				<ProjectType>$(OpenStrataProjectType)</ProjectType>
			</StratiFiles>
		</ItemGroup>
	</Target>


	<Target Name="SpecifyImportPackageSolutionFile"
		Returns="@(ImportPackageSolutionFiles)" DependsOnTargets="PowerAppsPackage">


		<ItemGroup>
			<ImportPackageSolutionFiles Include="$(SolutionPackageZipPath)\$(SolutionPackageZipFile)">
				<IsProjectReference>true</IsProjectReference>
				<LocalImportSequence>$(LocalImportSequence)</LocalImportSequence>
				<ProjectType>$(OpenStrataProjectType)</ProjectType>
				<overwriteunmanagedcustomizations Condition="'$(overwriteunmanagedcustomizations)'=='true'">$(overwriteunmanagedcustomizations)</overwriteunmanagedcustomizations>
				<publishworkflowsandactivateplugins Condition="'$(publishworkflowsandactivateplugins)'=='true'">$(publishworkflowsandactivateplugins)</publishworkflowsandactivateplugins>
			</ImportPackageSolutionFiles>
		</ItemGroup>
	</Target>

	<Target Name="SpecifyDataverseSolutionUniqueName"
			Returns="$(DataverseSolutionUniqueName)" DependsOnTargets="OS_GetDataverseSolutionInfo">

	</Target>


	<PropertyGroup>

		<CopyCdsSolutionContentDependsOn>
			OS_GetDataverseSolutionInfo;
			OS_SetDataverseSolutionInfo;
			$(CopyCdsSolutionContentDependsOn)
		</CopyCdsSolutionContentDependsOn>

		<GetDataverseSolutionInfo>
			$(GetDataverseSolutionInfo)
		</GetDataverseSolutionInfo>

		<SetDataverseSolutionInfo>
			$(SetDataverseSolutionInfo);
			RemoveCanvasAppVersion;
		</SetDataverseSolutionInfo>

		<DebuggingFixSolutionXml Condition="'$(DebuggingFixSolutionXml)'==''">false</DebuggingFixSolutionXml>
		<RemoveActiveDependencies Condition="'$(RemoveActiveDependencies)'==''">false</RemoveActiveDependencies>

	</PropertyGroup>


	<ItemGroup Label="FixSolutionXml defaults">
		<AttributeDependenciesToRemove Include="ownerid" />
		<SolutionDependenciesToRemove Include="Active" Condition="'$(RemoveActiveDependencies)'=='true'" />
	</ItemGroup>

	<PropertyGroup Label="RemoveSolutionClutterProperties">
		<RemoveSolutionClutter Condition="'$(RemoveSolutionClutter)'==''">true</RemoveSolutionClutter>
		<!--<IncludeDVTableSearch Condition="'$(IncludeDVTableSearch)'!=''">false</IncludeDVTableSearch>-->
		<dvtablesearchentitiespath>$(SolutionRootPath)\dvtablesearchentities</dvtablesearchentitiespath>
		<dvtablesearchspath>$(SolutionRootPath)\dvtablesearchs</dvtablesearchspath>
		<FixSolutionXmlDependsOn Condition="'$(RemoveSolutionClutter)'=='true'">$(FixSolutionXmlDependsOn);RemoveSolutionClutter</FixSolutionXmlDependsOn>
	</PropertyGroup>

	<ItemGroup Label ="DVTableSearchClutterItems" Condition="'$(IncludeDVTableSearch)'!='true'" >
		<RequiredTypeDependenciesToRemove Include="DVTableSearch" Condition="'$(IncludeDVTableSearch)'!='true'" />
		<DependentTypeDependenciesToRemove Include="DVTableSearchEntity" Condition="'$(IncludeDVTableSearch)'!='true'" />		
		<SolutionClutterDirectory Include="$(dvtablesearchentitiespath)" Condition="'$(IncludeDVTableSearch)'!='true'" />
		<SolutionClutterDirectory Include="$(dvtablesearchspath)" Condition="'$(IncludeDVTableSearch)'!='true'"/>
	</ItemGroup>


	<Target Name="FixSolutionXml" DependsOnTargets="FixMergeDiffVersionMarkup;OS_SetDataverseSolutionInfo;RemoveCanvasAppVersion;$(FixSolutionXmlDependsOn)" AfterTargets="Export" BeforeTargets="PowerAppsPackage">
		<FixSolutionXml
             RootPath="$(SolutionRootPath)"
			 AttributeDependenciesToRemove="@(AttributeDependenciesToRemove)"
			 SolutionDependenciesToRemove="@(SolutionDependenciesToRemove)"
			 RequiredTypeDependenciesToRemove="@(RequiredTypeDependenciesToRemove)"
			 DependentTypeDependenciesToRemove="@(DependentTypeDependenciesToRemove)"			 
			 SolutionDependencyMinVersion="@(SolutionDependencyMinVersion)"
			 Debugging="$(DebuggingFixSolutionXml)"
			>
		</FixSolutionXml>
	</Target>

	<Target Name="RemoveSolutionClutter" Condition="'$(RemoveSolutionClutter)'=='true'" >
		<RemoveDir Directories="%(SolutionClutterDirectory.Identity)" Condition="Exists('%(SolutionClutterDirectory.Identity)')" >
			<Output TaskParameter="RemovedDirectories" ItemName="DeletedSolutionClutterDirectories" />
		</RemoveDir>
		<Delete  Files="@(SolutionClutterFiles)" ContinueOnError="true" TreatErrorsAsWarnings="true">
			<Output TaskParameter="DeletedFiles" ItemName="DeletedSolutionClutterFiles"/>
		</Delete>
	</Target>

	<Target Name="BeforeCopyCdsSolutionContent" BeforeTargets="CopyCdsSolutionContent"
			DependsOnTargets="$(CopyCdsSolutionContentDependsOn)" >

	</Target>

	<Target Name="OS_GetDataverseSolutionInfo" DependsOnTargets="OS_SetDataverseSolutionInfo;$(GetDataverseSolutionInfo)">
		<GetSolutionInfo
             RootPath="$(SolutionRootPath)"
			>
			<Output TaskParameter="DataverseSolutionUniqueName"
                  PropertyName="DataverseSolutionUniqueName" />
			<Output TaskParameter="DataverseSolutionVersion"
                  PropertyName="DataverseSolutionVersion" />
			<Output TaskParameter="DataverseSolutionManaged"
                  PropertyName="DataverseSolutionManaged" />
			<Output TaskParameter="DataverseSolutionPublisherUniqueName"
                  PropertyName="DataverseSolutionPublisherUniqueName" />
			<Output TaskParameter="DataverseSolutionCustomizationPrefix"
                  PropertyName="DataverseSolutionCustomizationPrefix" />
		</GetSolutionInfo>
	</Target>

	<Target Name="OS_SetDataverseSolutionInfo" DependsOnTargets="FixMergeDiffVersionMarkup;SetVersionInfo;$(SetDataverseSolutionInfo)">
		<SetSolutionInfo
             RootPath="$(SolutionRootPath)"
             DataverseSolutionVersion="$(Version)"
			 AutoUpdateVersion="$(AutoUpdateVersion)"			 
			 PublisherXmlPath="$(PublisherSolutionXmlPath)"
			>
		</SetSolutionInfo>

        <Warning Text="Version number set to $(Version)" Condition="'$(AutoUpdateVersion)' == 'true'" />

		<PropertyGroup>
			<SolutionVersion>$(Version)</SolutionVersion>
		</PropertyGroup>
	</Target>

	<Target Name="EnsureSolutionUniqueName" Condition="'$(SolutionUniqueName)'==''"  >

		<Message Text="Ensuring a value for solution unique name" Importance="High" />

	</Target>

	<Target Name="RemoveCanvasAppVersion" >
		<ItemGroup>
			<CanvasAppMetaXmlFiles Include="$(ProjectDir)$(SolutionRootPath)\CanvasApps\*.meta.xml"/>
		</ItemGroup>
		<RemoveCanvasAppVersion
		      CanvasAppMetaXmlFiles="@(CanvasAppMetaXmlFiles)"
		/>		
	</Target>

	<Target Name="SetCanvasAppVersionToUTCNow" >
		<ItemGroup>
			<CanvasAppMetaXmlFiles Include="$(ProjectDir)$(SolutionRootPath)\CanvasApps\*.meta.xml"/>
		</ItemGroup>		
		<SetCanvasAppVersionToUTCNow
		        CanvasAppMetaXmlFiles="@(CanvasAppMetaXmlFiles)"
		/>
	</Target>	

	
	<!--Need to update the targets-->
	<Target Name="CustomApiAfterExportFix" AfterTargets="PacExportSolution" BeforeTargets="PowerAppsPackage" Condition="'$(UseCustomApiPluginTypeFix)'=='true' ">
		<ItemGroup>
			<CustomAPIToDelete Include="$(SolutionRootPath)\customapis\*\customapi.xml" />
		</ItemGroup>
		<Delete Files="@(CustomAPIToDelete)" />
	</Target>



</Project>
