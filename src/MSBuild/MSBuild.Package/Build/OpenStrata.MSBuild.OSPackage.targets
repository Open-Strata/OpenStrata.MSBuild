<!--
***********************************************************************************************
OpenStrata.MSBuild.OSPackage.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) 74Bravo LLC and Contributors. All rights reserved.. All rights reserved.
***********************************************************************************************
-->
<Project  xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >

	<!-- Tasks -->
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreateEditableImportPackageClassFile" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateImportPackagePartialClass" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreateImportStrataManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateLocalStratiManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.UpdateImportConfig" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GeneratePackageUniqueName" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreatePackageZip" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateStrataPackageManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />


	<ItemGroup>
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.CoreAssemblies" />
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.Deployment" />
		<!--  Microsoft.CrmSdk.UII.CommonAssemblies seems to be no longer incldued in the packaging.  9/5/2024 -->
		<!--<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.UII.CommonAssemblies" />-->
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.Workflow" />
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.XrmTooling.CoreAssembly" />
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.CrmSdk.XrmTooling.PackageDeployment" />
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.IdentityModel.Clients.ActiveDirectory" />
		<PackagesWithWellKnownRefAssemblies Include="Microsoft.Rest.ClientRuntime" />
		<PackagesWithWellKnownRefAssemblies Include="Newtonsoft.Json" />
		<!--<PackagesWithWellKnownRefAssemblies Include="OpenStrata.Deployment.Sdk" />-->
		<PackagesWithWellKnownRefAssemblies Include="System.IO.Compression" />
	</ItemGroup>


	<Target Name="GeneratePackageUniqueName" Condition="'$(PackageUniqueName)' == ''">

		<GeneratePackageUniqueName
			ProjectName="$(MSBuildProjectName)"
			>
			<Output TaskParameter="PackageUniqueName"
                  PropertyName="PackageUniqueName" />
		</GeneratePackageUniqueName>

		<PropertyGroup>
			<ImportPackageDataFolder Condition="'$(ImportPackageDataFolder)' == ''">$(PackageUniqueName)</ImportPackageDataFolder>
		</PropertyGroup>

	</Target>

	<Target Name="CreatePackageZip" DependsOnTargets="$(CreatePackageZipDependsOn)"
                              AfterTargets="Build" >

		<CreatePackageZip
				OutputDir="$(OutDir)"
			    PackageDataFolder="$(ImportPackageDataFolder)"
				RunTimeFiles="@(RuntimeItemsToIncludeInPackageZip)"
				StratiPackageFiles="@(StratiPackageFiles)"
				PackageOutputPath="$(PackageOutputPath)"
				ContentTypesXmlPath="$(MSBuildThisFileDirectory)..\templates\PackageZip\Content_Types.xml"
			>
			<Output TaskParameter="PackageZipPath"
                  PropertyName="PackageZipPath" />

		</CreatePackageZip>



	</Target>

	<Target Name="GetRuntimeItemsToIncludeInPackageZip"  DependsOnTargets="StagePackageContent" >

		<ItemGroup>

			<_RefPackagesToPack Include="%(RuntimeCopyLocalItems.NuGetPackageId)" Exclude="@(PackagesWithWellKnownRefAssemblies)" >
				<PathInPackage>%(RuntimeCopyLocalItems.PathInPackage)</PathInPackage>
				<FullLocalPath>%(RuntimeCopyLocalItems.Identity)</FullLocalPath>
			</_RefPackagesToPack>

			<RuntimeItemsToIncludeInPackageZip Include="%(_RefPackagesToPack.FullLocalPath)" >
				<NuGetPackageId>%(_RefPackagesToPack.Identity)</NuGetPackageId>
			</RuntimeItemsToIncludeInPackageZip>

			<RuntimeItemsToIncludeInPackageZip Include="$(TargetPath)" />
			<!--Should prevent this earlier...-->
			<RuntimeItemsToIncludeInPackageZip Remove="$(OutDir)" />

		</ItemGroup>
	</Target>

	<Target Name="GenerateLocalStratiManifest"  DependsOnTargets="GeneratePackageUniqueName;GetLocalStratiFiles;$(GenerateLocalStratiManifestDependsOn)">

		<GenerateLocalStratiManifest
			 IntermediateOutputPath="$(IntermediateOutputPath)"
			 ProjectName="$(MSBuildProjectName)"
			 ProjectVersion="$(Version)"
			 PackageUniqueName="$(PackageUniqueName)"
			 ProjectReferenceStrati="@(SpecifiedStratiFiles)"
			 PackageReferenceStrati="@(StratiPackageReference)"
			 >
			<Output TaskParameter="CreatedStratiManifestPath"
                  PropertyName="LocalStratiManifestPath" />
		</GenerateLocalStratiManifest>

	</Target>

	<Target Name="CreateImportStrataManifest" DependsOnTargets="$(CreateImportStrataManifestDependsOn)">

		<CreateImportStrataManifest
				OutputDir="$(OutDir)"
			    PackageDataFolder="$(ImportPackageDataFolder)"
			    PackageReferenceStrati="@(StratiPackageReference)"
				LocalStratiManifestPath="$(LocalStratiManifestPath)"
			    OverwriteUnmanaged="$(overwriteunmanagedcustomizations)"
			    PublishAndActivate="$(publishworkflowsandactivateplugins)"
			>
			<Output TaskParameter="CreatedImportStrataManifestPath"
                  PropertyName="ImportStrataManifestPath" />

		</CreateImportStrataManifest>


	</Target>

	<Target Name="UpdateImportConfig" DependsOnTargets="CreateImportStrataManifest">

		<UpdateImportConfig
				ImportStrataManifestPath="$(ImportStrataManifestPath)"
				ImportConfigStartFromPath="PkgFolder\ImportConfig.xml"
				OutputDir="$(OutDir)"
			    PackageDataFolder="$(ImportPackageDataFolder)"
			    OverwriteUnmanaged="$(overwriteunmanagedcustomizations)"
			    PublishAndActivate="$(publishworkflowsandactivateplugins)"
			>
			<Output TaskParameter="ImportConfigPath"
                  PropertyName="ImportConfigPath" />
			<Output TaskParameter="CalculatedAppSourceAnchorSolution"
                  PropertyName="CalculatedAppSourceAnchorSolution" />
		</UpdateImportConfig>

		<PropertyGroup>
			<AppSourceAnchorSolution Condition="'$(AppSourceAnchorSolution)' == ''" >$(CalculatedAppSourceAnchorSolution)</AppSourceAnchorSolution>
		</PropertyGroup>

	</Target>


	<Target Name="GenerateImportPackagePartialClass" DependsOnTargets="GeneratePackageUniqueName"
			BeforeTargets="CoreCompile" Outputs="$(ImportPackagePartialCodeFilePath)" >

		<GenerateImportPackagePartialClass
			DefaultNameSpace="$(RootNamespace)"
			ImportPackageShortName="$(ImportPackageShortName)"
			ImportPackageLongName="$(ImportPackageLongName)"
			ImportPackageDescription="$(ImportPackageDescription)"
			ImportPackageDataFolder="$(ImportPackageDataFolder)"
			CodeTemplatePath="$(MSBuildThisFileDirectory)..\templates\Src\ImportPackageTemplate.msbuild.cs"
			OutputDir="$(IntermediateOutputPath)">
			<Output TaskParameter="OutputCodeFile"
                  PropertyName="ImportPackagePartialCodeFilePath" />
		</GenerateImportPackagePartialClass>

		<ItemGroup>
			<Compile Remove="$(ImportPackagePartialCodeFilePath)"></Compile>
			<Compile Include="$(ImportPackagePartialCodeFilePath)"></Compile>
		</ItemGroup>

	</Target>

	<Target Name="CreateEditableImportPackageClassFile"
			Condition="!Exists('ImportPackage.cs')" BeforeTargets="CoreCompile">

		<CreateEditableImportPackageClassFile
			DefaultNameSpace="$(RootNamespace)"
			CodeTemplatePath="$(MSBuildThisFileDirectory)..\templates\Src\ImportPackageTemplate.cs"
			OutputDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="OutputCodeFile"
                  PropertyName="ImportPackageEditableCodeFilePath" />
		</CreateEditableImportPackageClassFile>

	</Target>

	<ItemGroup>
		<PkgFolderTemplateFiles Include="$(MSBuildThisFileDirectory)..\templates\Src\PkgFolder\**\*.*" />
	</ItemGroup>

	<Target Name="CreatePkgFolderIfItDoesNotExist"
			Condition="!Exists('$(MSBuildProjectDirectory)\PkgFolder')">

		<Copy SourceFiles="@(PkgFolderTemplateFiles)"
			    DestinationFiles="@(PkgFolderTemplateFiles->'$(MSBuildProjectDirectory)\PkgFolder\%(RecursiveDir)%(Filename)%(Extension)')" />

	</Target>

	<!--Need to do homework on the purpose/utility of this.  Keeping it here to 
	ensure the same behavior of the pac command line.  -->
	<Target Name="ZipOutputPath" Condition="'$(MimicPacProjectBehavior)' == 'true'" DependsOnTargets="GeneratePackageUniqueName" >
		<ZipDirectory Overwrite="true" SourceDirectory="data" DestinationFile="$(OutDir)$(ImportPackageDataFolder)\data.zip" />
	</Target>


	<Target Name="GetLocalStratiFiles"  >

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyStratiFiles"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);LocalStrati=true;">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="SpecifiedStratiFiles"/>
		</MSBuild>

		<ItemGroup>
			<!--Added to support flexible addition of new strati project types-->
			<StratiPackageFiles Include="%(SpecifiedStratiFiles.Identity)" >
				<StratiType>%(SpecifiedStratiFiles.ProjectType)</StratiType>
				<UniqueName>$(PackageUniqueName)</UniqueName>
			</StratiPackageFiles>
		</ItemGroup>

	</Target>


	<Target Name="_GetPackageImportConfigDataFilesFromPackageReferences">

		<ItemGroup>
			<ImportPackageConfigDataFiles Include="%(StratiPackageReference.StratiDir)configdata\*.zip" />
		</ItemGroup>

	</Target>

	<Target Name="_GetPackageConfigDataFileFromProjectReferences">

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyConfigDataImportFile"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="ImportPackageConfigDataFiles"/>
		</MSBuild>

	</Target>

	<Target Name="GetImportPackageConfigDataFiles"
		DependsOnTargets="GeneratePackageUniqueName;_GetPackageConfigDataFileFromProjectReferences; _GetPackageImportConfigDataFilesFromPackageReferences">

		<Copy SourceFiles="@(ImportPackageConfigDataFiles)"
			   DestinationFolder="$(OutDir)$(ImportPackageDataFolder)\ConfigData" />

	</Target>


	<Target Name="_GetPackageSolutionFileFromPackageReferences">

		<ItemGroup>
			<ImportPackageSolutionFiles Include="%(StratiPackageReference.StratiDir)solution\*.zip" />
		</ItemGroup>

	</Target>



	<Target Name="_GetPackageRunTimeFromPackageReferences">

		<ItemGroup>
			<StratiPackageReferenceRuntime Include="%(StratiPackageReference.StratiDir)deployment\*.*" >
				<NuGetPackageId>%(StratiPackageReference.Identity)</NuGetPackageId>
			</StratiPackageReferenceRuntime>
		</ItemGroup>

		<Copy SourceFiles="@(StratiPackageReferenceRuntime)"
			  DestinationFolder="$(OutDir)" />

		<ItemGroup>
			<RuntimeItemsToIncludeInPackageZip Include="$(OutDir)%(StratiPackageReferenceRuntime.Filename)%(StratiPackageReferenceRuntime.Extension)" >
				<NuGetPackageId>%(StratiPackageReferenceRuntime.NuGetPackageId)</NuGetPackageId>
			</RuntimeItemsToIncludeInPackageZip>
		</ItemGroup>

	</Target>

	<Target Name="_GetPackageRunTimeFromProjectReferences">

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyLocalPackageStratiRuntimes"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="LocalPackageStratiRuntimes"/>
		</MSBuild>

		<ItemGroup>
			<RuntimeItemsToIncludeInPackageZip Include="$(OutDir)%(LocalPackageStratiRuntimes.Filename)%(LocalPackageStratiRuntimes.Extension)">
				<NuGetPackageId>%(LocalPackageStratiRuntimes.NuGetPackageId)</NuGetPackageId>
			</RuntimeItemsToIncludeInPackageZip>
		</ItemGroup>

	</Target>


	<Target Name="_GetPackageSolutionFileFromProjectReferences">

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyImportPackageSolutionFile"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="ImportPackageSolutionFiles"/>
		</MSBuild>

	</Target>

	<Target Name="GetImportPackageSolutionFiles"
			DependsOnTargets="GeneratePackageUniqueName;_GetPackageSolutionFileFromProjectReferences; _GetPackageSolutionFileFromPackageReferences">

		<Copy SourceFiles="@(ImportPackageSolutionFiles)"
			   DestinationFolder="$(OutDir)$(ImportPackageDataFolder)" />

	</Target>




	<Target Name="StagePackageContent"
			AfterTargets="Build"
			DependsOnTargets="$(StagePackageContentDependsOn)">
		<!--TODO:  Rename the PkgFolder to the final PackageFolder Name-->
	</Target>

	<Target Name="RenameOutputDirPkgFolder" DependsOnTargets="StagePackageContent">

		<ItemGroup>
			<OutputDirPkgFiles Include="$(OutDir)PkgFolder\**\*.*" Exclude="$(OutDir)PkgFolder\ImportConfig.xml" />
		</ItemGroup>

		<Copy SourceFiles="@(OutputDirPkgFiles)"
			    DestinationFiles="@(OutputDirPkgFiles->'$(OutDir)$(ImportPackageDataFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />

		<RemoveDir Directories="$(OutDir)PkgFolder\"/>

	</Target>

	<Target Name="SpecifyAppsourcePackageZipPath"
			Returns="@(AppsourcePackageZipPaths)" DependsOnTargets="CreatePackageZip"
			>

		<ConvertToAbsolutePath
			Paths="$(PackageZipPath)">
			<Output TaskParameter="AbsolutePaths" ItemName="_absolutePackageZipPath"/>
		</ConvertToAbsolutePath>

		<ItemGroup>
			<AppsourcePackageZipPaths Include="@(_absolutePackageZipPath)">
				<AnchorSolution>$(AppSourceAnchorSolution)</AnchorSolution>
			</AppsourcePackageZipPaths>
		</ItemGroup>
	</Target>

	<PropertyGroup>

		<CreatePackageZipDependsOn>
			GetRuntimeItemsToIncludeInPackageZip;
			CreateImportStrataManifest;
			UpdateImportConfig;
			RenameOutputDirPkgFolder;
			$(CreatePackageZipDependsOn)
		</CreatePackageZipDependsOn>

		<StagePackageContentDependsOn>
			ZipOutputPath;
			GetImportPackageSolutionFiles;
			GetImportPackageConfigDataFiles;
			_GetPackageRunTimeFromPackageReferences;
			_GetPackageRunTimeFromProjectReferences;
			$(StagePackageContentDependsOn)
		</StagePackageContentDependsOn>

		<GenerateLocalStratiManifestDependsOn>
			GetRuntimeItemsToIncludeInPackageZip;
			StagePackageContent;
			$(GenerateLocalStratiManifestDependsOn)
		</GenerateLocalStratiManifestDependsOn>

		<CreateImportStrataManifestDependsOn>
			GenerateLocalStratiManifest;
			$(CreateImportStrataManifestDependsOn)
		</CreateImportStrataManifestDependsOn>

	</PropertyGroup>




	<PropertyGroup>
		<ManifestTargets>GenerateOStrataPackageManifest;$(ManifestTargets)</ManifestTargets>
	</PropertyGroup>

	<Target Name="GenerateOStrataPackageManifest" >

		<GenerateStrataPackageManifest
			SolutionDir="$(SolutionDir)"
			ostrataVersion="$(ostrataPackageVersion)"
			PackageReferenceStrati="@(StratiPackageReference)" />
	</Target>





</Project>
