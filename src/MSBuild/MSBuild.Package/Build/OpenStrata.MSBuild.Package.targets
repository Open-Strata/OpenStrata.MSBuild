<!--
***********************************************************************************************
OpenStrata.MSBuild.Package.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) 74Bravo LLC and Contributors. All rights reserved.. All rights reserved.
***********************************************************************************************
-->
<Project  xmlns='http://schemas.microsoft.com/developer/msbuild/2003' >

	<PropertyGroup Condition="'$(OpenStrataBuildPackageAssemblyFile)' == ''">
		<OpenStrataBuildPackageAssemblyFile>$(MSBuildThisFileDirectory)..\tasks\OpenStrata.MSBuild.Package.dll</OpenStrataBuildPackageAssemblyFile>
		<MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>

		<overwriteunmanagedcustomizations Condition="'$(overwriteunmanagedcustomizations)'=='' And '$(Stage)'=='dev'">false</overwriteunmanagedcustomizations>
		<overwriteunmanagedcustomizations Condition="'$(overwriteunmanagedcustomizations)'==''">false</overwriteunmanagedcustomizations>

		<publishworkflowsandactivateplugins Condition="'$(publishworkflowsandactivateplugins)'==''">true</publishworkflowsandactivateplugins>

		<MSPA_Build_PDPackageId>Microsoft.PowerApps.MSBuild.PDPackage</MSPA_Build_PDPackageId>
		<USING_MSPA_Build_PDPackage>$(MSBuildAllProjects.Contains('Microsoft.PowerApps.MSBuild.PDPackage'))</USING_MSPA_Build_PDPackage>

	</PropertyGroup>

	<!-- Tasks -->
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreateEditableImportPackageClassFile" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateImportPackagePartialClass" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreateImportStrataManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateLocalStratiManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<!-- <UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.UpdateImportConfig" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" /> -->
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GeneratePackageUniqueName" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />
	<!-- <UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.CreatePackageZip" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" /> -->
	<UsingTask TaskName="OpenStrata.MSBuild.Package.Tasks.GenerateStrataPackageManifest" AssemblyFile="$(OpenStrataBuildPackageAssemblyFile)"     TaskFactory="TaskHostFactory" />

	<Import Project="$(MSBuildThisFileDirectory)OpenStrata.MSBuild.PDPackage.targets" Condition="'$(USING_MSPA_Build_PDPackage)'=='true'" />
	<Import Project="$(MSBuildThisFileDirectory)OpenStrata.MSBuild.OSPackage.targets" Condition="'$(USING_MSPA_Build_PDPackage)'!='true'" />

	<Target Name="GenerateLocalStratiManifest"  DependsOnTargets="GeneratePackageUniqueName;GetLocalStratiFiles;$(GenerateLocalStratiManifestDependsOn)">

		<GenerateLocalStratiManifest
			 IntermediateOutputPath="$(IntermediateOutputPath)"
			 ProjectName="$(MSBuildProjectName)"
			 ProjectVersion="$(Version)"
			 PackageUniqueName="$(PackageUniqueName)"
			 ProjectReferenceStrati="@(SpecifiedStratiFiles)"
			 PackageReferenceStrati="@(StratiPackageReference)"
			 >
			<Output TaskParameter="CreatedStratiManifestPath"
                  PropertyName="LocalStratiManifestPath" />
		</GenerateLocalStratiManifest>

	</Target>

	<Target Name="CreateImportStrataManifest" DependsOnTargets="GenerateLocalStratiManifest;$(CreateImportStrataManifestDependsOn)">

		<CreateImportStrataManifest
				OutputDir="$(OutDir)"
			    PackageDataFolder="$(ImportPackageDataFolder)"
			    PackageReferenceStrati="@(StratiPackageReference)"
				LocalStratiManifestPath="$(LocalStratiManifestPath)"
			    OverwriteUnmanaged="$(overwriteunmanagedcustomizations)"
			    PublishAndActivate="$(publishworkflowsandactivateplugins)"
			>
			<Output TaskParameter="CreatedImportStrataManifestPath"
                  PropertyName="ImportStrataManifestPath" />

		</CreateImportStrataManifest>


	</Target>


	<Target Name="GenerateImportPackagePartialClass" DependsOnTargets="GeneratePackageUniqueName"
			BeforeTargets="CoreCompile" Outputs="$(ImportPackagePartialCodeFilePath)" >

		<GenerateImportPackagePartialClass
			DefaultNameSpace="$(RootNamespace)"
			ImportPackageShortName="$(ImportPackageShortName)"
			ImportPackageLongName="$(ImportPackageLongName)"
			ImportPackageDescription="$(ImportPackageDescription)"
			ImportPackageDataFolder="$(ImportPackageDataFolder)"
			CodeTemplatePath="$(MSBuildThisFileDirectory)..\templates\Src\ImportPackageTemplate.msbuild.cs"
			OutputDir="$(IntermediateOutputPath)">
			<Output TaskParameter="OutputCodeFile"
                  PropertyName="ImportPackagePartialCodeFilePath" />
		</GenerateImportPackagePartialClass>

		<ItemGroup>
			<Compile Remove="$(ImportPackagePartialCodeFilePath)"></Compile>
			<Compile Include="$(ImportPackagePartialCodeFilePath)"></Compile>
		</ItemGroup>

	</Target>

	<Target Name="CreateEditableImportPackageClassFile"
			Condition="!Exists('ImportPackage.cs')" BeforeTargets="CoreCompile">

		<CreateEditableImportPackageClassFile
			DefaultNameSpace="$(RootNamespace)"
			CodeTemplatePath="$(MSBuildThisFileDirectory)..\templates\Src\ImportPackageTemplate.cs"
			OutputDir="$(MSBuildProjectDirectory)">
			<Output TaskParameter="OutputCodeFile"
                  PropertyName="ImportPackageEditableCodeFilePath" />
		</CreateEditableImportPackageClassFile>

	</Target>	

	<Target Name="GeneratePackageUniqueName" Condition="'$(PackageUniqueName)' == ''">

		<GeneratePackageUniqueName
			ProjectName="$(MSBuildProjectName)"
			>
			<Output TaskParameter="PackageUniqueName"
                  PropertyName="PackageUniqueName" />
		</GeneratePackageUniqueName>

		<PropertyGroup>
			<ImportPackageDataFolder Condition="'$(ImportPackageDataFolder)' == ''">$(PackageUniqueName)</ImportPackageDataFolder>
		</PropertyGroup>

	</Target>

	<Target Name="_GetPackageConfigDataFileFromProjectReferences">

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyConfigDataImportFile"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="ImportPackageConfigDataFiles"/>
		</MSBuild>

	</Target>	


	<Target Name="GetLocalStratiFiles"  >

		<MSBuild
		  Projects="@(ProjectReference)"
		  Targets="SpecifyStratiFiles"
		  SkipNonexistentTargets="true"
		  SkipNonexistentProjects="true"
		  Properties="Configuration=$(Configuration);LocalStrati=true;">
			<Output
			  TaskParameter="TargetOutputs"
			  ItemName="SpecifiedStratiFiles"/>
		</MSBuild>

		<ItemGroup>
			<!--Added to support flexible addition of new strati project types-->
			<StratiPackageFiles Include="@(SpecifiedStratiFiles->WithMetadataValue('ProjectType', 'documenttemplates'))">
				<StratiType>%(SpecifiedStratiFiles.ProjectType)</StratiType>
				<UniqueName>$(PackageUniqueName)</UniqueName>
				<PackageLocation>%(SpecifiedStratiFiles.PackageLocation)</PackageLocation>
				<RelativePublishPath>documenttemplates\%(SpecifiedStratiFiles.Filename)%(SpecifiedStratiFiles.Extension)</RelativePublishPath>
			</StratiPackageFiles>

			<StratiPackageFiles Include="@(SpecifiedStratiFiles->WithMetadataValue('ProjectType', 'configdata'))">
				<StratiType>%(SpecifiedStratiFiles.ProjectType)</StratiType>
				<UniqueName>$(PackageUniqueName)</UniqueName>
				<PackageLocation>%(SpecifiedStratiFiles.PackageLocation)</PackageLocation>
				<RelativePublishPath>configdata\%(SpecifiedStratiFiles.Filename)%(SpecifiedStratiFiles.Extension)</RelativePublishPath>
			</StratiPackageFiles>

			<StratiPackageFiles Include="@(SpecifiedStratiFiles->WithMetadataValue('ProjectType', 'powerpages'))">
				<StratiType>%(SpecifiedStratiFiles.ProjectType)</StratiType>
				<UniqueName>$(PackageUniqueName)</UniqueName>
				<PackageLocation>%(SpecifiedStratiFiles.PackageLocation)</PackageLocation>
				<RelativePublishPath>powerpages\%(SpecifiedStratiFiles.Filename)%(SpecifiedStratiFiles.Extension)</RelativePublishPath>
			</StratiPackageFiles>

		</ItemGroup>

	</Target>	

	<PropertyGroup>
		<ManifestTargets>GenerateOStrataPackageManifest;$(ManifestTargets)</ManifestTargets>
	</PropertyGroup>

	<Target Name="GenerateOStrataPackageManifest" >

		<GenerateStrataPackageManifest
			SolutionDir="$(SolutionDir)"
			ostrataVersion="$(ostrataPackageVersion)"
			PackageReferenceStrati="@(StratiPackageReference)" />
	</Target>

	<ItemGroup>
		<PkgFolderTemplateFiles Include="$(MSBuildThisFileDirectory)..\templates\Src\PkgFolder\**\*.*" />
	</ItemGroup>

	<Target Name="CreatePkgFolderIfItDoesNotExist"
			Condition="!Exists('$(MSBuildProjectDirectory)\$(PkgFolder)')">

		<Copy SourceFiles="@(PkgFolderTemplateFiles)"
			    DestinationFiles="@(PkgFolderTemplateFiles->'$(MSBuildProjectDirectory)\$(PkgFolder)\%(RecursiveDir)%(Filename)%(Extension)')" />

	</Target>	


</Project>
